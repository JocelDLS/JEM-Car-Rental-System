    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vehicle.rental.management.system;

import com.mysql.cj.xdevapi.Table;
import java.awt.Component;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.sql.Connection;
import java.sql.Date;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.*;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.Arrays;
import java.util.logging.*;

/**
 *
 * @author joker
 */
public class BookingManagement extends javax.swing.JInternalFrame {

    

    /**
     * Creates new form BookingManagement
     */
    public BookingManagement() {
        initComponents();
        initialize();
        
        String[] columnNames = {"Booking ID", "Customer Name", "Vehicle Model", "Start Date", "End Date", "Status", "Approve", "Delete"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        JTable Table = new JTable(model);
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
    }
    
    
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();

        setBorder(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Customer Name", "Vehicle Model", "Start Date", "End Date", "Status", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setRowHeight(40);
        Table.setSelectionBackground(new java.awt.Color(255, 102, 102));
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(Table);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, -2, 870, 600));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorAdded
        // TODO add your handling code here:
        loadTableData();
    }//GEN-LAST:event_TableAncestorAdded
  
    
    private void initialize() {
        String[] columnNames = {"Booking ID", "Customer Name", "Vehicle Model", "Start Date", "End Date", "Status", "Action"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        Table.setModel(model);
        Table.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());
        Table.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor(new JCheckBox()));

        loadTableData();  // Load the data into the table when initialized
    }
   private void loadTableData() {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vehiclerental", "root", "password")) {
        String sqlquery = "SELECT b.booking_id, c.fullname, v.model, b.start_date, b.end_date, b.status " +
                          "FROM bookings b " +
                          "JOIN customer c ON b.customer_id = c.customer_id " +
                          "JOIN vehicle v ON b.vehicle_id = v.vehicle_id " +
                          "WHERE b.status IN ('pending', 'approved')"; // Filter based on status
        PreparedStatement pst = conn.prepareStatement(sqlquery);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            int bookingId = rs.getInt("booking_id");
            String customerName = rs.getString("fullname");
            String vehicleModel = rs.getString("model");
            Date startDate = rs.getDate("start_date");
            Date endDate = rs.getDate("end_date");
            String status = rs.getString("status");

            // Log data being added to the model
            model.addRow(new Object[]{bookingId, customerName, vehicleModel, startDate, endDate, status, "Approve/View"});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error loading table data: " + e.getMessage());
    }
}


    
    class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        return this;
    }
}

    // Custom editor for buttons
    class ButtonEditor extends DefaultCellEditor {
    private final JButton button;
    private String label;
    private boolean isPushed;
    private int row;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(e -> fireEditingStopped());
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.row = row;
        this.label = value == null ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        if (isPushed) {
            int bookingId = (int) Table.getValueAt(row, 0); // Ensure you're using `Table`
            
            // Get the current status value from the table
            String currentStatus = (String) Table.getValueAt(row, 5); // Assuming status is in column index 5
            
            // Define the possible actions
            String[] options = {"Approve", "View"};
            int action = JOptionPane.showOptionDialog(null, "Choose an action:", "Booking Action",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            if (action == 0) {
                // Ensure the status being updated is valid
                if (currentStatus.equals("pending")) {
                    updateBookingStatus(bookingId, "approved"); // Change to approved
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot approve. Status is already '" + currentStatus + "'.");
                }
            } else if (action == 1) {
                viewBookingDetails(bookingId); // View details of the booking
            }
        }
        isPushed = false;
        return label;
    }
}



    private void updateBookingStatus(int bookingId, String status) {
        // Check if status is valid
        String[] validStatuses = {"pending", "approved", "rejected"};
        if (Arrays.asList(validStatuses).contains(status)) {
            // Proceed with the update
            String sql = "UPDATE bookings SET status = ? WHERE booking_id = ?";
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vehiclerental", "root", "password");
                 PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setString(1, status); // Ensure status is valid
                pst.setInt(2, bookingId);
                int rowsUpdated = pst.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Booking status updated to '" + status + "'");
                    loadTableData(); // Refresh the table
                } else {
                    JOptionPane.showMessageDialog(null, "Error updating booking status.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error updating booking status: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid status value: " + status, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }






    private void viewBookingDetails(int bookingId) {
        String query = """
            SELECT b.booking_id, c.fullname, v.model, b.start_date, b.end_date, b.total_price ,b.status
            FROM bookings b
            JOIN customer c ON b.customer_id = c.customer_id
            JOIN vehicle v ON b.vehicle_id = v.vehicle_id
            WHERE b.booking_id = ?
        """;

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vehiclerental", "root", "password");
             PreparedStatement pst = conn.prepareStatement(query)) {

            pst.setInt(1, bookingId);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    String details = """
                        Booking ID: %d
                        Customer Name: %s
                        Vehicle Model: %s
                        Start Date: %s
                        End Date: %s
                        Total Price: %.2f
                        Status: %s
                    """.formatted(
                            rs.getInt("booking_id"),
                            rs.getString("fullname"),
                            rs.getString("model"),
                            rs.getDate("start_date"),
                            rs.getDate("end_date"),
                            rs.getDouble("total_price"),
                            rs.getString("status")
                    );
                    JOptionPane.showMessageDialog(this, details, "Booking Details", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading booking details: " + e.getMessage());
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
