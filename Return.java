/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vehicle.rental.management.system;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.awt.*;
/**
 *
 * @author joker
 */
import javax.swing.table.TableCellRenderer;
public class Return extends javax.swing.JInternalFrame {

    /**
     * Creates new form Return
     */
    public Return() {
        initComponents();
        loadTableData();
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        
        Rent.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());
        Rent.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor(new JCheckBox()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Rent = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        Return = new javax.swing.JTable();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Rent List");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Return List");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 270, -1, -1));

        Rent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Rent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Rent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Customer Name", "Vehicle Model", "Start Date", "End Date", "Status", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Rent.setRowHeight(40);
        Rent.setSelectionBackground(new java.awt.Color(255, 102, 102));
        Rent.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                RentAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(Rent);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 860, 220));

        Return.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Return.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Return.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Customer Name", "Vehicle Model", "Start Date", "End Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Return.setRowHeight(40);
        Return.setSelectionBackground(new java.awt.Color(255, 102, 102));
        Return.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ReturnAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(Return);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 860, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RentAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_RentAncestorAdded
        // TODO add your handling code here:
        loadTableData();
    }//GEN-LAST:event_RentAncestorAdded

    private void ReturnAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ReturnAncestorAdded
        // TODO add your handling code here:
        loadTableData();
    }//GEN-LAST:event_ReturnAncestorAdded
    
    private void loadTableData() {
        try {
            Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
                "root",
                "password"
            );
            // Load rented vehicles
            String rentQuery = "SELECT b.booking_id, c.fullname, v.model, b.start_date, b.end_date, b.status " +
                               "FROM bookings b " +
                               "JOIN customer c ON b.customer_id = c.customer_id " +
                               "JOIN vehicle v ON b.vehicle_id = v.vehicle_id " +
                               "WHERE b.status = 'Approved'";
            try (PreparedStatement rentStmt = conn.prepareStatement(rentQuery);
                 ResultSet rentRs = rentStmt.executeQuery()) {

                DefaultTableModel rentModel = (DefaultTableModel) Rent.getModel();
                rentModel.setRowCount(0);

                while (rentRs.next()) {
                    rentModel.addRow(new Object[]{
                        rentRs.getInt("booking_id"),
                        rentRs.getString("fullname"),
                        rentRs.getString("model"),
                        rentRs.getDate("start_date"),
                        rentRs.getDate("end_date"),
                        rentRs.getString("status"),
                        "Return"
                    });
                }
            }

            // Load returned vehicles
            String returnQuery = "SELECT b.booking_id, c.fullname, v.model, b.start_date, b.end_date, b.status " +
                                 "FROM bookings b " +
                                 "JOIN customer c ON b.customer_id = c.customer_id " +
                                 "JOIN vehicle v ON b.vehicle_id = v.vehicle_id " +
                                 "WHERE b.status = 'Returned'";
            try (PreparedStatement returnStmt = conn.prepareStatement(returnQuery);
                 ResultSet returnRs = returnStmt.executeQuery()) {

                DefaultTableModel returnModel = (DefaultTableModel) Return.getModel();
                returnModel.setRowCount(0);

                while (returnRs.next()) {
                    returnModel.addRow(new Object[]{
                        returnRs.getInt("booking_id"),
                        returnRs.getString("fullname"),
                        returnRs.getString("model"),
                        returnRs.getDate("start_date"),
                        returnRs.getDate("end_date"),
                        returnRs.getString("status")
                    });
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro-r loading data: " + e.getMessage());
        }
    }

    private void handleReturn(int bookingId) {
         try (Connection conn = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
            "root",
            "password"
        )) {
            String updateQuery = "UPDATE bookings SET status = 'Returned' WHERE booking_id = ?";
            try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
                updateStmt.setInt(1, bookingId);
                int rowsAffected = updateStmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Vehicle returned successfully!");
                    loadTableData(); // Refresh the tables
                } else {
                    JOptionPane.showMessageDialog(this, "No such booking ID found.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error returning vehicle: " + e.getMessage());
        }
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(e -> {
                fireEditingStopped();
                int bookingId = (int) Rent.getValueAt(Rent.getSelectedRow(), 0);
                handleReturn(bookingId);
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return label;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Rent;
    private javax.swing.JTable Return;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
