 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vehicle.rental.management.system;


import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.time.Year;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;


/**
 *
 * @author joker
 */
public class VehicleManagement extends javax.swing.JInternalFrame {
    
    String path2 = null;
    
    
    /**
     * Creates new form VehicleManagement
     */
    public VehicleManagement() {
        initComponents();
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        
        
        
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        inputImage = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        vehicleType = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        Brand = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        fuelType = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        seatingCapacity = new javax.swing.JSpinner();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        pricePerday = new javax.swing.JTextField();
        ImageBTN = new javax.swing.JButton();
        addNew = new javax.swing.JButton();
        Mileage = new javax.swing.JSpinner();
        vehicleStatus = new javax.swing.JComboBox<>();
        Transmission = new javax.swing.JComboBox<>();
        Year = new com.toedter.calendar.JYearChooser();
        registrationNumber = new javax.swing.JTextField();
        Model = new javax.swing.JTextField();
        Color = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(870, 620));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Vehicle Info"));
        jPanel9.setPreferredSize(new java.awt.Dimension(850, 280));

        inputImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Brand:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Model:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Year:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Vehicle Type:");

        vehicleType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vehicleType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a vehicle type", "Sedan", "SUV", "Van", "Subcompact Hatchback" }));

        jLabel40.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel40.setText("Registration Number:");

        Brand.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel38.setText("Fuel Type:");

        fuelType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fuelType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a fuel type", "Gasoline", "Diesel", "Electric", "Hybrid" }));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel39.setText("Seating Capacity:");

        seatingCapacity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        seatingCapacity.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel41.setText("Mileage:");

        jLabel42.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel42.setText("Vehicle Status:");

        jLabel43.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel43.setText("Price Per Day:");

        jLabel44.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel44.setText("Transmission:");
        jLabel44.setToolTipText("");

        pricePerday.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        ImageBTN.setText("Choose Image");
        ImageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageBTNActionPerformed(evt);
            }
        });

        addNew.setText("Add New");
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        Mileage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Mileage.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.1d));
        Mileage.setToolTipText("");

        vehicleStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vehicleStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Rented", "maintenance", "Out of Service" }));

        Transmission.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Transmission.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select transmission type", "Automatic", "Manual" }));

        registrationNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        Model.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        Color.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Color:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vehicleType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(Year, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Brand)
                    .addComponent(Model))
                .addGap(35, 35, 35)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationNumber)
                    .addComponent(Color)
                    .addComponent(seatingCapacity)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39)
                            .addComponent(jLabel38)
                            .addComponent(jLabel40)
                            .addComponent(jLabel16))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fuelType, 0, 223, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel43)
                    .addComponent(jLabel41)
                    .addComponent(jLabel44)
                    .addComponent(jLabel42)
                    .addComponent(pricePerday)
                    .addComponent(Mileage)
                    .addComponent(vehicleStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Transmission, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(inputImage, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(ImageBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addNew)
                        .addGap(43, 43, 43))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(inputImage, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImageBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNew, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel40)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Mileage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Brand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(registrationNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pricePerday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39)
                        .addGap(1, 1, 1)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seatingCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Transmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel43)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel44))
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Year, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(jLabel38)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vehicleType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fuelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vehicleStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        Table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Model", "Year", "Registration Number", "Vehicle Status", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setRowHeight(40);
        Table.setSelectionBackground(new java.awt.Color(255, 102, 102));
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        );

        setBounds(0, 0, 870, 620);
    }// </editor-fold>//GEN-END:initComponents

    private void ImageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageBTNActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String path = f.getAbsolutePath();

        if (f == null) {
            JOptionPane.showMessageDialog(null, "No file selected", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            BufferedImage bi = ImageIO.read(f);
            if (bi == null) {
                JOptionPane.showMessageDialog(null, "Unsupported image format", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int labelWidth = inputImage.getWidth();
            int labelHeight = inputImage.getHeight();
            Image img = bi.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);

            ImageIcon icon = new ImageIcon(img);
            inputImage.setIcon(icon);
            path2 = path;
        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Failed to load image", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_ImageBTNActionPerformed

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        // TODO add your handling code here:
        String brand =Brand.getText();
        String model =Model.getText();
        int year = (Integer) Year.getValue();
        String vehicletype = (String)vehicleType.getSelectedItem();
        String registrationnumber = registrationNumber.getText();
        String fuel =(String)fuelType.getSelectedItem();
        String color =Color.getText();
        int seatingcapacity= (Integer)seatingCapacity.getValue();
        double mileage = (Double)Mileage.getValue();
        String price =pricePerday.getText();
        String transmission =(String)Transmission.getSelectedItem();
        String vehiclestatus=(String)vehicleStatus.getSelectedItem();
        
        
        try {
            // Validate inputs
            if (brand.isEmpty() || model.isEmpty() || registrationnumber.isEmpty() || price.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill all required fields.");
                return;
            }

            // Convert price to double
            double pricePerDay = Double.parseDouble(price);

            // Validate image file
            File imageFile = new File(path2);
            if (!imageFile.exists() || !imageFile.canRead()) {
                JOptionPane.showMessageDialog(null, "Image file is invalid or not accessible.");
                return;
            }
            InputStream is = new FileInputStream(imageFile);

            // Establish database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            java.sql.Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
                "root",
                "password"
            );

            // Use parameterized query
            String sqlquery = "INSERT INTO vehicle (brand, model, year, vehicle_type, registration_number, fuel_type, "
                    + "seating_capacity, color, mileage, price_per_day, transmission, vehicle_status, image) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sqlquery);

            // Set query parameters
            pst.setString(1, brand);
            pst.setString(2, model);
            pst.setInt(3, year);
            pst.setString(4, vehicletype);
            pst.setString(5, registrationnumber);
            pst.setString(6, fuel);
            pst.setInt(7, seatingcapacity);
            pst.setString(8, color);
            pst.setDouble(9, mileage);
            pst.setDouble(10, pricePerDay);
            pst.setString(11, transmission);
            pst.setString(12, vehiclestatus);
            pst.setBlob(13, is);

            // Execute the query
            pst.execute();
            JOptionPane.showMessageDialog(null, "Vehicle saved successfully!");

            // Reset input fields
            Brand.setText("");
            Model.setText("");
            Brand.setText("");
            Color.setText("");
            registrationNumber.setText("");;
            pricePerday.setText("");
            inputImage.setIcon(null);

            Year.setValue(2024);
            seatingCapacity.setValue(5);
            Mileage.setValue(0);

            vehicleType.setSelectedIndex(0);
            vehicleStatus.setSelectedIndex(0);
            Transmission.setSelectedIndex(0);
            fuelType.setSelectedIndex(0);;
            
            loadTableData();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid price or numeric input: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace(); // For debugging
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
        }   
    }//GEN-LAST:event_addNewActionPerformed

    private void TableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorAdded
        // TODO add your handling code here:
        loadTableData();
    }//GEN-LAST:event_TableAncestorAdded
    // ... (previous code remains unchanged)


private void loadTableData() {
    try {
        // Database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        java.sql.Connection conn = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
            "root",
            "password"
        );

        // SQL Query to fetch all vehicles
        String sqlquery = "SELECT brand, model, year, registration_number, vehicle_status FROM vehicle";
        PreparedStatement pst = conn.prepareStatement(sqlquery);
        var rs = pst.executeQuery();

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) Table.getModel();

        // Clear existing rows
        model.setRowCount(0);

        // Populate table with data from the database
        while (rs.next()) {
            String brand = rs.getString("brand");
            String vehicleModel = rs.getString("model"); // Renamed to avoid conflict
            int year = rs.getInt("year");
            String registrationNumber = rs.getString("registration_number");
            String vehicleStatus = rs.getString("vehicle_status");

            model.addRow(new Object[]{brand, vehicleModel, year, registrationNumber, vehicleStatus, "Edit/Delete"});
            
        }
        rs.close();
        pst.close();
        conn.close();

        // Add custom renderer and editor for the action column
        Table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer());
        Table.getColumnModel().getColumn(5).setCellEditor(new ButtonEditor(new JCheckBox()));

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error loading table data: " + e.getMessage());
        e.printStackTrace();
    }
}

// Custom button renderer
class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
    }

    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        return this;
    }
}

// Custom button editor
class ButtonEditor extends DefaultCellEditor {
    protected JButton button;
    private String label;
    private boolean isPushed;
    private int row, col;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
        this.row = row;
        this.col = column;
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }

    public Object getCellEditorValue() {
        if (isPushed) {
            if (label.equals("Edit/Delete")) {
                int option = JOptionPane.showOptionDialog(button, "Choose an action", "Edit/Delete",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null,
                        new String[]{"Edit Status", "Delete"}, "Edit Status");
                if (option == 0) {
                    editVehicleStatus(row);
                } else if (option == 1) {
                    deleteVehicle(row);
                }
            }
        }
        isPushed = false;
        return label;
    }

    private void editVehicleStatus(int row) {
        String[] options = {"Available", "Rented", "Maintenance", "Out of Service"};
        String newStatus = (String) JOptionPane.showInputDialog(null, "Select new status:",
                "Edit Vehicle Status", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (newStatus != null) {
            updateVehicleStatus(row, newStatus);
        }
    }

    private void deleteVehicle(int row) {
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this vehicle?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String registrationNumber = (String) Table.getValueAt(row, 3);
            deleteVehicleFromDatabase(registrationNumber);
        }
    }

    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }

    protected void fireEditingStopped() {
        super.fireEditingStopped();
    }
}

private void updateVehicleStatus(int row, String newStatus) {
    String registrationNumber = (String) Table.getValueAt(row, 3);
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        java.sql.Connection conn = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
            "root",
            "password"
        );
        String sqlquery = "UPDATE vehicle SET vehicle_status = ? WHERE registration_number = ?";
        PreparedStatement pst = conn.prepareStatement(sqlquery);
        pst.setString(1, newStatus);
        pst.setString(2, registrationNumber);
        pst.executeUpdate();
        pst.close();
        conn.close();

        // Update the table model
        Table.setValueAt(newStatus, row, 4);
        JOptionPane.showMessageDialog(null, "Vehicle status updated successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error updating vehicle status: " + e.getMessage());
        e.printStackTrace();
    }
}

private void deleteVehicleFromDatabase(String registrationNumber) {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        java.sql.Connection conn = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/vehiclerental?zeroDateTimeBehavior=CONVERT_TO_NULL",
            "root",
            "password"
        );
        String sqlquery = "DELETE FROM vehicle WHERE registration_number = ?";
        PreparedStatement pst = conn.prepareStatement(sqlquery);
        pst.setString(1, registrationNumber);
        pst.executeUpdate();
        pst.close();
        conn.close();

        // Reload the table data
        loadTableData();
        JOptionPane.showMessageDialog(null, "Vehicle deleted successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error deleting vehicle: " + e.getMessage());
        e.printStackTrace();
    }

}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Brand;
    private javax.swing.JTextField Color;
    private javax.swing.JButton ImageBTN;
    private javax.swing.JSpinner Mileage;
    private javax.swing.JTextField Model;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox<String> Transmission;
    private com.toedter.calendar.JYearChooser Year;
    private javax.swing.JButton addNew;
    private javax.swing.JComboBox<String> fuelType;
    private javax.swing.JLabel inputImage;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pricePerday;
    private javax.swing.JTextField registrationNumber;
    private javax.swing.JSpinner seatingCapacity;
    private javax.swing.JComboBox<String> vehicleStatus;
    private javax.swing.JComboBox<String> vehicleType;
    // End of variables declaration//GEN-END:variables
}
